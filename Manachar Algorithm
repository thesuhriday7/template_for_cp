class Manacher_Algo{
    public:
    vector<int>p;

    void build(string s){
        string t;
        for(auto nei:s){
            t.push_back('#');
            t.push_back(nei);
        }
        t.push_back('#');
        run_manacher(t);
    }

    void run_manacher(string s){
        int n=s.length();
        p.resize(n,1);
        int l=1,r=1;
        for(int i=1;i<n;i++){
            p[i]=max(0,min(r-i,p[max(0,l+r-i)]));
            while(i-p[i]>=0 && i+p[i]<n && s[i-p[i]]==s[i+p[i]]){
                p[i]++;
            }
            if(i+p[i]>r){
                l=i-p[i];
                r=i+p[i];
            }
        }
    }

    int get_LongestPalindrome(int cen,bool odd){
        int pos=2*cen+1+(!odd);
        return p[pos]-1;
    }

    bool check_forpalindrome(int l,int r){
        if((r-l+1)<=get_LongestPalindrome((l+r)/2,l%2==r%2)){
            return true;
        }
        else return false;
    }
};

//T.C-O(3*n)->O(N)
//S.C-O(2*(2*n+1))->O(N)
